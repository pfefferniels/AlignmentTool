export const lProb = [
	
	
]

export const uniLProb = [
	[-10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -8.91946, -8.91946, -8.91946, -8.07215, -8.07215, -8.22631, -7.37901, -7.82084, -6.49171, -6.3545, -6.55233, -6.52155, -6.75996, -5.55216, -5.39309, -5.57541, -4.70486, -4.52913, -4.28149, -4.82511, -3.51678, -3.83391, -3.97306, -3.77002, -3.86534, -3.18073, -3.73393, -3.51228, -3.32971, -3.01773, -2.90086, -3.20462, -2.96621, -2.92882, -3.19587, -2.99253, -3.34857, -3.01318, -3.41277, -3.67594, -3.58191, -3.51828, -3.69013, -4.0068, -4.28473, -4.02161, -4.09114, -4.67573, -4.62444, -4.66621, -5.4331, -5.4129, -6.06682, -5.37367, -6.32919, -5.79856, -6.88257, -6.49171, -6.30449, -7.45312, -6.79919, -7.12769, -8.40863, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181 ],
	[-9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -8.67009, -9.7687, -8.15926, -8.3824, -8.15926, -8.15926, -7.82279, -6.72418, -5.98451, -6.30296, -6.99611, -5.32605, -5.30279, -5.46463, -5.11474, -4.92451, -4.91667, -5.67435, -3.98795, -4.4754, -4.44083, -3.99726, -3.91362, -3.5581, -4.20418, -3.33255, -3.17292, -3.52259, -3.31193, -3.55409, -2.79142, -3.26891, -3.30723, -3.07166, -3.00712, -2.9049, -3.12361, -3.15263, -3.01409, -3.39538, -3.34059, -3.5501, -3.2979, -3.81805, -4.17399, -4.37507, -4.49058, -4.59255, -5.04131, -5.62556, -5.25784, -6.03103, -6.27219, -6.54982, -6.30296, -7.46611, -7.12964, -7.97694, -7.97694, -8.15926, -8.3824, -8.67009, -8.67009, -8.67009, -9.07555, -8.67009, -9.7687, -9.07555, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687 ]
]

export const lrlProb = [
	-0.5755099333, // log(0.562418)
	-0.82649116217 //log(0.437582)
]

/*
class HandSeparationEngine {
	pr: PianoRoll
	initialPitchLH: number = 53
	initialPitchRH: number = 71

	setInitialPitches(pitchLH: number, pitchRH: number) {
		this.initialPitchLH = pitchLH
		this.initialPitchRH = pitchRH
	}

	separateHands() {
		//chan= 0:Right Hand, 1:Left Hand

		vector<int> v(10);

		int length=pr.evts.size();
		int dp_c=15;
		int handPartPreference[length][2];//HandPartPreference[m][0]=1 if m-th note is likely to be in the right-hand-part
		vector<int> pitch;
		for(int n=0;n<length;n+=1){
			PianoRollEvt evt=pr.evts[n];
			handPartPreference[n][0]=0;
			handPartPreference[n][1]=0;
			int p_cur=evt.pitch;
			int p_max=p_cur;
			int p_min=p_cur;
			pitch.push_back(p_cur);
			for(int m=0;m<length;m+=1){
				if(pr.evts[m].offtime < evt.ontime){continue;}
				if(pr.evts[m].ontime  > evt.offtime){break;}
				int p=SitchToPitch(pr.evts[m].sitch);
				if(p>p_max){p_max=p;}
				if(p<p_min){p_min=p;}
			}//endfor m
			if(p_cur>p_min+dp_c){handPartPreference[n][0]=1;}//likely to be in the right-hand-part
			if(p_cur<p_max-dp_c){handPartPreference[n][1]=1;}//likely to be in the left-hand-part
		}//endfor n

		int Nh=50;
		vector<double> LP;//k=2*h+sig
		LP.assign(2*Nh,-1000);
		vector<vector<int> > argmaxHist;
		LP[0]=lProb[0][pitch[0]-iniPitchRH+128];
		LP[1]=lProb[1][pitch[0]-iniPitchLH+128];
		for(int n=1;n<length;n+=1){
			double max,logP;
			vector<double> preLP(LP);
			vector<int> argmax(2*Nh);
			for(int i=0;i<2*Nh;i+=1){//j -> i
				max=preLP[i]-10000;
				argmax[i]=i;
				for(int j=0;j<2*Nh;j+=1){
					if(j%2==i%2 && j/2==i/2-1){
						logP=preLP[j]+LRLprob[i%2]+Lprob[i%2][pitch[n]-pitch[n-1]+128];
						if(logP>max){max=logP; argmax[i]=j;}
					}//endif
					if(j%2!=i%2 && i/2==0){
						if(n-2-j/2>=0){
							logP=preLP[j]+LRLprob[i%2]+Lprob[i%2][pitch[n]-pitch[n-2-j/2]+128];
						}else{
							logP=preLP[j]+LRLprob[i%2]+Lprob[i%2][pitch[n]-((i%2==0)? iniPitchRH:iniPitchLH)+128];
						}//endif
						if(logP>max){max=logP; argmax[i]=j;}
					}//endif
				}//endfor j
				if(i%2==0){
					v[1]=53;
					if(n-1-i/2>=0){v[1]=pitch[n-1-i/2];}
					LP[i]=max+((v[1]<pitch[n])? 0:-4.605)+((handPartPreference[n][0]>0)? -0.0202027:-0.693147)+((handPartPreference[n][1]>0)? -3.912023:-0.693147);
				}else{
					v[0]=71;
					if(n-1-i/2>=0){v[0]=pitch[n-1-i/2];}
					LP[i]=max+((v[0]>pitch[n])? 0:-4.605)+((handPartPreference[n][0]>0)? -3.912023:-0.693147)+((handPartPreference[n][1]>0)? -0.0202027:-0.693147);
				}//endif
			}//endfor i
			argmaxHist.push_back(argmax);
		}//endfor n

		vector<int> estStates(length);
		double max=LP[0];
		int amax=0;
		for(int i=0;i<LP.size();i+=1){if(LP[i]>max){max=LP[i]; amax=i;}}
		estStates[length-1]=amax;
		for(int n=0;n<length-1;n+=1){
			amax=argmaxHist[length-2-n][amax];
			estStates[length-2-n]=amax;
		}//endfor n

		for(int n=0;n<length;n+=1){
			pr.evts[n].channel=estStates[n]%2;
		}//endfor n

	}
}
*/