import { PianoRoll, sitchToPitch } from ".."

export const lProb = [
	
	
]

export const unilProb = [
	[-10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -8.91946, -8.91946, -8.91946, -8.07215, -8.07215, -8.22631, -7.37901, -7.82084, -6.49171, -6.3545, -6.55233, -6.52155, -6.75996, -5.55216, -5.39309, -5.57541, -4.70486, -4.52913, -4.28149, -4.82511, -3.51678, -3.83391, -3.97306, -3.77002, -3.86534, -3.18073, -3.73393, -3.51228, -3.32971, -3.01773, -2.90086, -3.20462, -2.96621, -2.92882, -3.19587, -2.99253, -3.34857, -3.01318, -3.41277, -3.67594, -3.58191, -3.51828, -3.69013, -4.0068, -4.28473, -4.02161, -4.09114, -4.67573, -4.62444, -4.66621, -5.4331, -5.4129, -6.06682, -5.37367, -6.32919, -5.79856, -6.88257, -6.49171, -6.30449, -7.45312, -6.79919, -7.12769, -8.40863, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181, -10.0181],
	[-9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -8.67009, -9.7687, -8.15926, -8.3824, -8.15926, -8.15926, -7.82279, -6.72418, -5.98451, -6.30296, -6.99611, -5.32605, -5.30279, -5.46463, -5.11474, -4.92451, -4.91667, -5.67435, -3.98795, -4.4754, -4.44083, -3.99726, -3.91362, -3.5581, -4.20418, -3.33255, -3.17292, -3.52259, -3.31193, -3.55409, -2.79142, -3.26891, -3.30723, -3.07166, -3.00712, -2.9049, -3.12361, -3.15263, -3.01409, -3.39538, -3.34059, -3.5501, -3.2979, -3.81805, -4.17399, -4.37507, -4.49058, -4.59255, -5.04131, -5.62556, -5.25784, -6.03103, -6.27219, -6.54982, -6.30296, -7.46611, -7.12964, -7.97694, -7.97694, -8.15926, -8.3824, -8.67009, -8.67009, -8.67009, -9.07555, -8.67009, -9.7687, -9.07555, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687, -9.7687]
]

export const lrlProb = [
	-0.5755099333, // log(0.562418)
	-0.82649116217 //log(0.437582)
]

type HandProbability = {
	pitch: number
	left: number
	right: number
}

export class HandSeparationEngine {
	pianoRoll: PianoRoll
	initialPitchLH: number = 53
	initialPitchRH: number = 71

	setInitialPitches(pitchLH: number, pitchRH: number) {
		this.initialPitchLH = pitchLH
		this.initialPitchRH = pitchRH
	}

	separateHands(dpc = 15) {
		const v = new Array<number>(15)

		const handProbabilities: HandProbability[] = this.pianoRoll.events.map(event => {
			const overlappingPitches = this.pianoRoll.events
				.filter(e => e.offtime > event.ontime && e.ontime < event.offtime)
				.map(e => sitchToPitch(e.sitch))

			const maxPitch = Math.max(...overlappingPitches)
			const minPitch = Math.min(...overlappingPitches)

			return {
				pitch: event.pitch,
				left: event.pitch < maxPitch - dpc ? 1 : 0,
				right: event.pitch > minPitch + dpc ? 1 : 0
			}
		})

		const pitches = this.pianoRoll.events.map(event => event.pitch)

		const nh = 50
		const lp = new Array(2 * nh).fill(-1000)
		lp[0] = lProb[0][pitches[0] - this.initialPitchRH + 128]
		lp[1] = lProb[1][pitches[0] - this.initialPitchLH + 128]

		const argmaxHistory: number[][] = []

		handProbabilities.forEach((prob, n) => {
			const pitch = prob.pitch
			const prevPitch = handProbabilities[n - 1].pitch

			let logP
			const preLP = lp.slice()
			const argmax = new Array<number>(2 * nh)
			for (let i = 0; i < 2 * nh; i++) {
				let max = preLP[i] - 10000
				argmax[i] = i

				for (let j = 0; j < 2 * nh; j++) {
					if (j % 2 == i % 2 && j / 2 == i / 2 - 1) {
						logP = preLP[j] + lrlProb[i % 2] + lProb[i % 2][pitch - prevPitch + 128]
						if (logP > max) {
							max = logP
							argmax[i] = j
						}
					}
					if (j % 2 != i % 2 && i / 2 == 0) {
						if (n - 2 - j / 2 >= 0) {
							logP = preLP[j] + lrlProb[i % 2] + lProb[i % 2][pitch - pitch[n - 2 - j / 2] + 128];
						} else {
							logP = preLP[j] + lrlProb[i % 2] + lProb[i % 2][pitch - ((i % 2 == 0) ? this.initialPitchRH : this.initialPitchLH) + 128];
						}
						if (logP > max) {
							max = logP;
							argmax[i] = j;
						}
					}
				}
				if (i % 2 == 0) {
					v[1] = 53;
					if (n - 1 - i / 2 >= 0) { v[1] = pitch[n - 1 - i / 2]; }
					lp[i] = max + ((v[1] < pitch[n]) ? 0 : -4.605) + ((prob.left > 0) ? -0.0202027 : -0.693147) + ((prob.right > 0) ? -3.912023 : -0.693147);
				} else {
					v[0] = 71;
					if (n - 1 - i / 2 >= 0) { v[0] = pitch[n - 1 - i / 2]; }
					lp[i] = max + ((v[0] > pitch[n]) ? 0 : -4.605) + ((prob.left > 0) ? -3.912023 : -0.693147) + ((prob.right > 0) ? -0.0202027 : -0.693147);
				}
			}
			argmaxHistory.push(argmax)
		})

		let estStates = new Array<number>(pitches.length)
		let maxProb = Math.max(...lp)
		let maxProbPosition = lp.indexOf(maxProb)

		estStates[estStates.length - 1] = maxProbPosition
		for (let i = 0; i < estStates.length - 1; i++) {
			maxProb = argmaxHistory[length - 2 - i][maxProbPosition]
			estStates[length - 2 - i] = maxProbPosition
		}

		this.pianoRoll.events.forEach((event, n) => {
			event.channel = estStates[n] % 2
		})
	}
}
